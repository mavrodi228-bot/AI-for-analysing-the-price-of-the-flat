# -*- coding: utf-8 -*-
"""moscow_neiro.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14mV76oHLJXJg1rUuF2mllLa6oztd7W46

Code for aimodel
"""

# ----- Импорт -----
import re
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import joblib

from sklearn.model_selection import train_test_split, RandomizedSearchCV
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.neural_network import MLPRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# ----- Параметры -----
DATA_PATH = "/content/dsdExcelnew.csv"
RANDOM_STATE = 42
FAST_MODE = False  # True — быстро, False — лучшее качество

# ----- Загружаем файл -----
df = pd.read_csv(DATA_PATH, sep=";", engine="python")

# Заменяем запятые на точки в числовых колонках
for col in df.columns:
    if df[col].dtype == object:
        df[col] = df[col].astype(str).str.replace(",", ".")
        try:
            df[col] = pd.to_numeric(df[col])
        except:
            pass

# Определяем целевую колонку
price_col = "price"
y = df[price_col].astype(float).values
X = df.drop(columns=[price_col])

# Отделяем числовые и категориальные
numeric_cols = X.select_dtypes(include=[np.number]).columns.tolist()
categorical_cols = X.select_dtypes(exclude=[np.number]).columns.tolist()

# Train/test split
y_log = np.log1p(y)  # логарифмируем для устойчивости
X_train, X_test, y_train, y_test = train_test_split(X, y_log, test_size=0.2, random_state=RANDOM_STATE)

# ----- Предобработка -----
numeric_transformer = Pipeline([
    ('imputer', SimpleImputer(strategy='median')),
    ('scaler', StandardScaler())
])
categorical_transformer = Pipeline([
    ('imputer', SimpleImputer(strategy='constant', fill_value='missing')),
    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))
])

preprocessor = ColumnTransformer([
    ('num', numeric_transformer, numeric_cols),
    ('cat', categorical_transformer, categorical_cols)
])

# ----- Быстрая модель (если FAST_MODE=True) -----
if FAST_MODE:
    from sklearn.linear_model import Ridge
    model = Pipeline([('pre', preprocessor), ('reg', Ridge(alpha=1.0))])
    model.fit(X_train, y_train)
    y_pred = np.expm1(model.predict(X_test))
    print("MAE:", mean_absolute_error(np.expm1(y_test), y_pred))
else:
    # ----- Нейросеть -----
    mlp = MLPRegressor(max_iter=700, early_stopping=True, random_state=RANDOM_STATE)

    pipeline = Pipeline([('pre', preprocessor), ('mlp', mlp)])

    param_dist = {
        'mlp__hidden_layer_sizes': [(128,64), (64,32), (64,64)],
        'mlp__alpha': [1e-4, 1e-3, 1e-2],
        'mlp__learning_rate_init': [1e-3, 5e-3]
    }

    rnd = RandomizedSearchCV(
        pipeline, param_distributions=param_dist,
        n_iter=5, cv=3, scoring='neg_mean_squared_error',
        random_state=RANDOM_STATE, n_jobs=-1, verbose=2
    )

    rnd.fit(X_train, y_train)

    best_model = rnd.best_estimator_
    joblib.dump(best_model, "price_model.pkl")
    print("Модель сохранена в price_model.pkl")

    # ----- Оценка -----
    y_pred = np.expm1(best_model.predict(X_test))
    y_test_orig = np.expm1(y_test)

    print("MAE:", mean_absolute_error(y_test_orig, y_pred))
    print("RMSE:", mean_squared_error(y_test_orig, y_pred, squared=False))
    print("R2:", r2_score(y_test_orig, y_pred))

    # ----- График -----
    plt.figure(figsize=(6,5))
    plt.scatter(y_test_orig, y_pred, alpha=0.4)
    m = min(y_test_orig.min(), y_pred.min()); M = max(y_test_orig.max(), y_pred.max())
    plt.plot([m, M],[m, M], linewidth=1)
    plt.xlabel("Факт, руб"); plt.ylabel("Предсказание, руб")
    plt.title("Нейросеть: Факт vs Предсказание")
    plt.grid(True)
    plt.show()

"""User input integration

WallsMaterial (материал стен):
Введите число, соответствующее материалу дома:

1 — кирпич

2 — панель

3 — монолит

4 — блок

5 — дерево

6 — смешанный

7 — другое
"""

import joblib, numpy as np, pandas as pd

model = joblib.load("price_model.pkl")

def predict_from_input(sample_dict):
    df = pd.DataFrame([sample_dict])
    pred_log = model.predict(df)[0]
    return float(np.expm1(pred_log))

# ---- Интерактивный ввод ----
print("Введите параметры квартиры для оценки:")

wallsMaterial = int(input("Материал стен (например 1=кирпич, 2=панель и т.д.): "))
floorNumber = int(input("Этаж: "))
floorsTotal = int(input("Всего этажей: "))
totalArea = float(input("Общая площадь (м²): "))
kitchenArea = float(input("Площадь кухни (м²): "))
latitude = float(input("Широта в пределах Москвы (55.30–56.00) (например 55.75): "))
longitude = float(input("Долгота в пределах Москвы (37.30–37.90)(например 37.62) : "))

user_input = {
    "wallsMaterial": wallsMaterial,
    "floorNumber": floorNumber,
    "floorsTotal": floorsTotal,
    "totalArea": totalArea,
    "kitchenArea": kitchenArea,
    "latitude": latitude,
    "longitude": longitude
}

predicted_price = predict_from_input(user_input)
print("\n Примерная стоимость квартиры:", round(predicted_price, 2), "руб")